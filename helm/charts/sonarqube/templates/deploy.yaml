{{- if .Values.enabled }}
apiVersion: v1
items:
{{- if .Values.deploy.sonar_ldap_enabled }}
- apiVersion: v1
  kind: Secret
  stringData:
    password: {{ .values.deploy.sonar_ldap_bind_password }}
    username: {{ .values.deploy.sonar_ldap_bind_dn }}
  metadata:
    name: {{ template "sonarqube.name" . }}-ldap-bind-dn
    namespace: {{ .Values.global.namespace }}
  type: kubernetes.io/basic-auth
{{- end }}
{{- if .Values.deploy.persistence_enabled  }}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: {{ template "sonarqube.name" . }}-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: {{ .Values.deploy.sonarqube_persistent_volume_size }}
  status: {}
{{- end }}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: {{ template "sonarqube.name" . }}
    name: {{ template "sonarqube.name" . }}
    namespace: {{ .Values.global.namespace }}
  spec:
    replicas: 1
    selector:
      app: {{ template "sonarqube.name" . }}
      deploymentconfig: {{ template "sonarqube.name" . }}
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
        post:
          execNewPod:
            command:
            - /bin/sh
            - -c
            - sleep 30 && curl http://admin:admin@{{ template "sonarqube.name" . }}:9000/api/webhooks/create
              -X POST -d "name=jenkins&url=http://{{ .Values.global.jenkins_hostName }}/sonarqube-webhook/"
            containerName: {{ template "sonarqube.name" . }}
          failurePolicy: Abort
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        labels:
          app: {{ template "sonarqube.name" . }}
          deploymentconfig: {{ template "sonarqube.name" . }}
      spec:
        containers:
        - env:
{{- if .Values.deploy.postgres_enabled  }}
          - name: JDBC_URL
            value: jdbc:postgresql://sonardb:5432/sonar
          - name: JDBC_USERNAME
            valueFrom:
              secretKeyRef:
                key: database-user
                name: sonardb
          - name: JDBC_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: sonardb
{{- else }}
          - name: JDBC_URL
            value: ''
{{- end }}
          - name: FORCE_AUTHENTICATION
            value: "true"
          - name: PROXY_HOST
            value: {{ .Values.deploy.proxy_host }}
          - name: PROXY_PORT
            value: {{ .Values.deploy.proxy_port }}
          - name: PROXY_USER
            value: {{ .Values.deploy.proxy_user }}
          - name: PROXY_PASSWORD
            value: {{ .Values.deploy.proxy_password }}
{{- if .Values.deploy.ldap_enabled  }}
          - name: LDAP_URL
            value: {{ .Values.deploy.sonar_ldap_url }}
          - name: LDAP_REALM
            value: {{ .Values.deploy.sonar_auth_realm }}
          - name: LDAP_AUTHENTICATION
            value: {{ .Values.deploy.sonar_ldap_bind_method }}
          - name: LDAP_USER_BASEDN
            value: {{ .Values.deploy.sonar_base_dn }}
          - name: LDAP_USER_REAL_NAME_ATTR
            value: {{ .Values.deploy.sonar_ldap_user_real_name_attr }}
          - name: LDAP_USER_EMAIL_ATTR
            value: {{ .Values.deploy.sonar_ldap_user_email_attr }}
          - name: LDAP_USER_REQUEST
            value: {{ .Values.deploy.sonar_ldap_user_request }}
          - name: LDAP_GROUP_BASEDN
            value: {{ .Values.deploy.sonar_ldap_group_basedn }}
          - name: LDAP_GROUP_REQUEST
            value: {{ .Values.deploy.sonar_ldap_group_request }}
          - name: LDAP_GROUP_ID_ATTR
            value: {{ .Values.deploy.sonar_ldap_group_id_attr }}
          - name: LDAP_CONTEXTFACTORY
            value: {{ .Values.deploy.sonar_ldap_contextfactory }}
          - name: SONAR_AUTOCREATE_USERS
            value: {{ .Values.deploy.sonar_autocreate_users }}
          - name: LDAP_BINDDN
            valueFrom:
              secretKeyRef:
                key: username
                name: {{ template "sonarqube.name" . }}-ldap-bind-dn
          - name: LDAP_BINDPASSWD
            valueFrom:
              secretKeyRef:
                key: password
                name: {{ template "sonarqube.name" . }}-ldap-bind-dn
{{- else }}
          - name: LDAP_REALM
            value: ''
{{- end }}
          - name: SONAR_SEARCH_JAVA_ADDITIONAL_OPTS
            value: '-Dnode.store.allow_mmapfs=false'
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 45
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: {{ template "sonarqube.name" . }}
          ports:
          - containerPort: 9000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: sonar-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: {{ template "sonarqube.name" . }}
        serviceAccountName: {{ template "sonarqube.name" . }}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: sonar-data
{{- if .Values.deploy.persistence_enabled  }}
          persistentVolumeClaim:
            claimName: sonarqube-data
{{- else }}
          emptyDir: {}
{{- end }}
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - {{ template "sonarqube.name" . }}
        from:
          kind: ImageStreamTag
          name: {{ template "sonarqube.name" . }}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: {{ template "sonarqube.name" . }}
    name: {{ template "sonarqube.name" . }}
    namespace: {{ .Values.global.namespace }}
  spec:
    ports:
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      deploymentconfig: {{ template "sonarqube.name" . }}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.sonarqube: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"sonarqube"}}'
    name: {{ template "sonarqube.name" . }}
- apiVersion: v1
  kind: RoleBinding
  metadata:
    name: sonarqube_view
  roleRef:
    name: view
  subjects:
  - kind: ServiceAccount
    name: {{ template "sonarqube.name" . }}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: {{ template "sonarqube.name" . }}
    name: "sonarqube"
    namespace: {{ .Values.global.namespace }}
  spec:
    port:
      targetPort: 9000-tcp
    tls:
      termination: edge
    to:
      kind: Service
      name: {{ template "sonarqube.name" . }}
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: {{ template "sonarqube.name" . }}
    name: "sonarqube-insecure"
    namespace: {{ .Values.global.namespace }}
  spec:
    port:
      targetPort: 9000-tcp
    to:
      kind: Service
      name: {{ template "sonarqube.name" . }}
      weight: 100
    wildcardPolicy: None
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
{{- end }}


